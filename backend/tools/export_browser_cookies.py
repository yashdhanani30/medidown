# tools/export_browser_cookies.py
import argparse
import sys
from typing import List

try:
    import browser_cookie3 as bc3
except Exception:
    print("Error: browser-cookie3 is required. Install with: pip install browser-cookie3", flush=True)
    sys.exit(1)

BROWSERS = {
    "chrome": bc3.chrome,
    "edge": bc3.edge,
    "brave": bc3.brave,
    "firefox": bc3.firefox,
}

HEADER = """# Netscape HTTP Cookie File
# This file was generated by export_browser_cookies.py
# Format: domain\tinclude_subdomains\tpath\tsecure\texpiration\tname\tvalue
"""

def to_netscape_lines(cjar, domains: List[str], include_session: bool) -> List[str]:
    domains = [d.lower().lstrip(".") for d in domains]
    lines = [HEADER]
    for cookie in cjar:
        cdomain = (cookie.domain or "").lower()
        # domain filter: suffix match
        if not any(cdomain.endswith(d) or cdomain.endswith("." + d) for d in domains):
            continue

        include_subdomains = "TRUE" if getattr(cookie, "domain_initial_dot", False) or cdomain.startswith(".") else "FALSE"
        domain_col = cdomain if cdomain.startswith(".") else "." + cdomain

        path = cookie.path or "/"
        secure = "TRUE" if cookie.secure else "FALSE"

        # expiry handling
        if cookie.expires is None:
            # session cookie: either 0 or force far-future if not including sessions
            expires = 0 if include_session else 2147483647
        else:
            try:
                expires = int(cookie.expires)
            except Exception:
                expires = 2147483647

        name = cookie.name or ""
        value = cookie.value or ""
        lines.append(f"{domain_col}\t{include_subdomains}\t{path}\t{secure}\t{expires}\t{name}\t{value}\n")
    return lines


def main():
    ap = argparse.ArgumentParser(description="Export browser cookies to Netscape format")
    ap.add_argument("--browser", choices=list(BROWSERS.keys()) + ["auto"], default="auto", help="Browser to read from")
    ap.add_argument("--domains", nargs="+", required=True, help="Domains to include (e.g., facebook.com instagram.com)")
    ap.add_argument("--out", required=True, help="Output file path")
    ap.add_argument("--include-session", action="store_true", help="Include session cookies (expires=0).")
    args = ap.parse_args()

    loaders = []
    if args.browser == "auto":
        for b in ("chrome", "edge", "brave", "firefox"):
            loaders.append(BROWSERS[b])
    else:
        loaders.append(BROWSERS[args.browser])

    combined = None
    errors = []
    for load in loaders:
        try:
            cj = load()  # loads cookies for selected browser
            if combined is None:
                combined = cj
            else:
                for c in cj:
                    combined.set_cookie(c)
        except Exception as e:
            errors.append(f"{load.__name__}: {e}")

    if combined is None:
        print("Failed to read cookies from any browser.")
        if errors:
            print("\n".join(errors))
        sys.exit(2)

    lines = to_netscape_lines(combined, args.domains, args.include_session)
    with open(args.out, "w", encoding="utf-8") as f:
        f.writelines(lines)

    print(f"Wrote {len(lines)-1} cookies to {args.out}")
    print("Done.")


if __name__ == "__main__":
    main()